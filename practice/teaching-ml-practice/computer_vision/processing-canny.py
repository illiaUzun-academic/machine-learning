import cv2
import matplotlib.pyplot as plt


# Функція для виявлення країв на зображенні
def detect_edges(image_path):
    # Завантаження зображення
    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

    # Застосування алгоритму Canny для виявлення країв
    edges = cv2.Canny(img, 100, 200)  # Параметри порогу для алгоритму Canny

    # Відображення оригінального зображення та зображення після виявлення країв
    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.imshow(img, cmap='gray')
    plt.title('Original Image')
    plt.axis('off')

    plt.subplot(1, 2, 2)
    plt.imshow(edges, cmap='gray')
    plt.title('Edges Detected')
    plt.axis('off')

    plt.show()


# Використання функції
detect_edges('test/plate.jpg')

# У цьому коді, спочатку зображення завантажується в відтінках сірого (cv2.IMREAD_GRAYSCALE), щоб спростити обробку.
# Далі застосовуємо алгоритм Canny за допомогою функції cv2.Canny, де 100 та 200 є пороговими значеннями для оператора
# Canny. Ці пороги визначають, які градієнти (зміни інтенсивності) будуть розглядатися як краї. Високі значення порогів
# можуть призвести до втрати деяких країв, тоді як низькі значення можуть призвести до виявлення більшої кількості країв,
# включаючи і шум.
#
# Результатом є два зображення, виведені поруч: оригінальне зображення та зображення після виявлення країв. Це демонструє,
# як алгоритм Canny виділяє важливі контури об'єктів на зображенні.
#
# Цей метод виявлення країв може бути особливо корисним у багатьох додатках, включаючи підготовку даних для машинного навчання,
# обробку зображень для покращення візуального сприйняття або як попередній крок для подальшої обробки зображень.
